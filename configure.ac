# AC_INIT (package, version, [bug-report], [tarname])
AC_INIT(DDD,1.9.0.20180308145113,[Yann.Thierry-Mieg@lip6.fr])

# We use automake to build makefiles
AM_INIT_AUTOMAKE([-Wall, subdir-objects])

# link time opt, set AR and RANLIB before LT_INIT call, unless configure overrides them.
# also Options for disabling LTO on Darwin since binutils sucks big time on that platform.
nolto=false

AC_ARG_ENABLE(	[nolto],
        [AC_HELP_STRING([--enable-nolto],[avoid using LTO flags, mostly for Darwin])],
        [  case "${enable_nolto}" in
            yes) nolto=true
                ;;
            no)
                ;;
            *)  AC_MSG_ERROR(Bad value ${enableval})
                ;;
            esac])

if test "x$nolto" = "xfalse"; then
   CXXFLAGS="-flto -fuse-linker-plugin $CXXFLAGS"
   test -z "$AR" && AR=gcc-ar
   test -z "$RANLIB" && RANLIB=gcc-ranlib
fi

# programs used to build
# we make static libs (use ranlib)
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])
LT_INIT([])

# M4 macros location
AC_CONFIG_MACRO_DIR([m4])

# we compile C++
# set Cxx compilation flags to either the value passed in
# ./configure --cxxflags=
# or none to change behavior from default cxx flags generated by autoconf
# default : -02 -g
#CXXFLAGS=${CXXFLAGS-}
test -z "$CFLAGS" && CFLAGS=
test -z "$CXXFLAGS" && CXXFLAGS=

# we compile C++11
CXXFLAGS="-std=c++11 $CXXFLAGS"

# AC_CHECK_LIB(tcmalloc, malloc, ,AC_MSG_WARN(google perftool not detected : not using tcmalloc))


#compile in C++
AC_PROG_CXX
AC_LANG(C++)


reentrant=false
parallel=false

# option to indicate libtbb folder
AC_ARG_WITH([libtbbinc],
            [AC_HELP_STRING([--with-libtbbinc=/include/path/libtbb],
                            [specify the include path of libtbb])])

AC_ARG_WITH([libtbbbin],
            [AC_HELP_STRING([--with-libtbbbin=/path/to/libtbb.a],
                            [specify the library linker path of libtbb])])


#Options for disabling google hash
stdhash=false

AC_ARG_ENABLE(	[stdhash],
        [AC_HELP_STRING([--enable-stdhash],[revert std lib hash map(default uses google sparse hash)])],
        [  case "${enable_stdhash}" in
            yes) stdhash=true
                ;;
            no)
                ;;
            *)  AC_MSG_ERROR(Bad value ${enableval})
                ;;
            esac])

if test "x$stdhash" = "xtrue"; then
    AC_DEFINE([USE_STD_HASH],1,[Define if you want to use std hash instead of google sparse hash.])
fi

CPPFLAGS="-Wno-unused-local-typedefs $CPPFLAGS"
#LDFLAGS="-all-static -static-libgcc -static-libstdc++ $LDFLAGS"

# Option to enable hash stats
AC_ARG_ENABLE([mingw-native],
				[AC_HELP_STRING([--enable-mingw-native],[build native win32 binaries for redistribution])],
				[ case "${enable_mingw_native}" in
					 yes) CXXFLAGS="-DPSAPI_VERSION=1  $CXXFLAGS"
					 LIBS="-lPSAPI $LIBS"
					 ;;
					 no) 
					 ;;
					 *) AC_MSG_ERROR(Bad value ${enableval})
					 ;;
				esac])



# Option to enable hash stats
AC_ARG_ENABLE([hash-stat],
				[AC_HELP_STRING([--enable-hash-stat],[collect stats on hash])],
				[ case "${enable_hash_stat}" in
					 yes) CFLAGS="-DHASH_STAT $CFLAGS"
					 CXXFLAGS="-DHASH_STAT $CXXFLAGS"
					 ;;
					 no)
					 ;;
					 *) AC_MSG_ERROR(Bad value ${enableval})
					 ;;
				esac])

AC_ARG_ENABLE(	[reentrant],
        [AC_HELP_STRING([--enable-reentrant],[turn on on thread-safe mode])],
        [  case "${enable_reentrant}" in
            yes) reentrant=true
                ;;
            no)
                ;;
            *)  AC_MSG_ERROR(Bad value ${enableval})
                ;;
            esac])


AC_ARG_ENABLE(	[parallel],
        [AC_HELP_STRING([--enable-parallel],[turn on on parallel mode])],
        [  case "${enable_parallel}" in
            yes) parallel=true
                 reentrant=true
                ;;
            no)
                ;;
            *)  AC_MSG_ERROR(Bad value ${enableval})
                ;;
            esac])



if test "x$parallel" = "xtrue"; then
    AC_DEFINE([PARALLEL_DD],1,[Define if you want parallel code.])
fi

if test "x$reentrant" = "xtrue"; then
    AC_DEFINE([REENTRANT],1,[Define if you want a thread-safe library.])
fi



AM_CONDITIONAL([REENTRANT], [test "x${reentrant}" = "xtrue" ])

AM_CONDITIONAL([WITH_LIBTBBINC_PATH], [test "x${with_libtbbinc}" != x])
if test "x${with_libtbbinc}" != x; then
    AC_SUBST([LIBTBB_INC],["${with_libtbbinc}"])
fi

AM_CONDITIONAL([WITH_LIBTBBBIN_PATH], [test "x${with_libtbbbin}" != x])
if test "x${with_libtbbbin}" != x; then
    AC_SUBST([LIBTBB_BIN],["${with_libtbbbin}"])
fi

AC_CONFIG_FILES([   Makefile
                    demo/Makefile
                    demo/hanoi/Makefile
                    demo/morpion/Makefile
                    ddd/Makefile
                    doc/Doxyfile
                    doc/Makefile])

# Do it !! (mandatory)
AC_OUTPUT
